package gui.seller.tab;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import phone.*;
import gui.LoginFrame;
import gui.tab.AbstractTabPanel;
import seller.*;

public class sellerPhoneTab extends AbstractTabPanel {
	private DefaultListModel listModel;
	private JList list;

	final List<Phone> itemlist = new ArrayList<>();
	
	public sellerPhoneTab(Seller seller) {
		super();
		Phone_List phonelist = new Phone_List(1);
		System.out.println(phonelist.Get_Total_Phone_List_Size());
		for(int i=0;i<phonelist.Get_Total_Phone_List_Size();i++)
			itemlist.add(phonelist.getTotal_phone_list().get(i));
		
		
		// GUI part
		JLabel lblTitle = new JLabel("Phone List");
		lblTitle.setFont(new Font("맑은 고딕", Font.BOLD, 30));
		lblTitle.setBounds(40, 33, 240, 40);
		add(lblTitle);
		
		// Scroll 가능한 List 보여주는 객체 생성 (ScrollPane 안에 JList 넣음
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(40, 150, 530, 425);
		add(scrollPane);

		
		// Listmodel 생성 (List의 element에 대한 정보를 지님)
		listModel = new DefaultListModel();
		for (Phone element : itemlist) {
			listModel.addElement(element.getMODEL_NAME());
		}
		
		// Listmodel을 연결한 JList 생성하고 Scroll 가능한 Panel에 추가 
		list = new JList(listModel);
		scrollPane.setViewportView(list);
		
		// 리스트에서 클릭 시 제품 정보와 사진 출력
		list.addListSelectionListener(new ListSelectionListener() {

			@Override
			public void valueChanged(ListSelectionEvent e) {
				// 클릭된 경우 정보 표시
				int index = list.getSelectedIndex();
				if (index < 0)
					return;

				if (index >= itemlist.size())
					return;
				Phone selected = itemlist.get(index);
			}
		});
		
		// 새로 데이터를 추가하는 버튼
		JButton btnNewData = new JButton("Add");
		btnNewData.setBounds(607, 200, 181, 45);
		add(btnNewData);
		btnNewData.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				String MODEL_NAME = "", CPU_INFO = "", DISPLAY = "", RAM = "", STORAGE = "", PRICE = "",
						PERFORMANCE = "", MANUFACTURE = "";

				MODEL_NAME = JOptionPane.showInputDialog("MODEL NAME");
				if (MODEL_NAME != null) {
					CPU_INFO = JOptionPane.showInputDialog("CPU_INFO");
					if (CPU_INFO != null) {
						DISPLAY = JOptionPane.showInputDialog("DISPLAY");
						if (DISPLAY != null) {
							RAM = JOptionPane.showInputDialog("RAM");
							if (RAM != null) {
								STORAGE = JOptionPane.showInputDialog("STORAGE");
								if (STORAGE != null) {
									PRICE = JOptionPane.showInputDialog("PRICE");
									if (PRICE != null) {
										PERFORMANCE = JOptionPane.showInputDialog("PERFORMANCE");
										if (PERFORMANCE != null) {
											MANUFACTURE = JOptionPane.showInputDialog("MANUFACTURE");
											
											updateList();
											phonelist.insert_Phone(MODEL_NAME, CPU_INFO, DISPLAY, RAM, STORAGE, PRICE, PERFORMANCE, MANUFACTURE);
											try
											{
											phonelist.WriteFile_PhoneList();
											}catch (Exception e) {
												e.printStackTrace();
											}	
											
										}
									}
								}
							}
						}
					}
				}

			}
		});

		// 리스트에서 더블 클릭 시 정보 수정
		list.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent evt) {
				JList list = (JList) evt.getSource();

				if (evt.getClickCount() != 0) {
				}
				// Double-click일 경우
				if (evt.getClickCount() == 2) {
					// 클릭된 Index 가져옴
					int index = list.locationToIndex(evt.getPoint());
					if (index < 0)
						return;

					if (index >= itemlist.size())
						return;
					Phone selected = itemlist.get(index);
					String MODEL_NAME = "", CPU_INFO = "", DISPLAY = "", RAM = "", STORAGE = "", PRICE = "",
							PERFORMANCE = "", MANUFACTURE = "";

					MODEL_NAME = JOptionPane.showInputDialog(sellerPhoneTab.this, selected, selected.getMODEL_NAME());
					if (MODEL_NAME != null) {
						CPU_INFO = JOptionPane.showInputDialog(sellerPhoneTab.this, selected, selected.getCPU_INFO());
						if (CPU_INFO != null) {
							DISPLAY = JOptionPane.showInputDialog(sellerPhoneTab.this, selected, selected.getDISPLAY());
							if (DISPLAY != null) {
								RAM = JOptionPane.showInputDialog(sellerPhoneTab.this, selected, selected.getRAM());
								if (RAM != null) {
									STORAGE = JOptionPane.showInputDialog(sellerPhoneTab.this, selected, selected.getSTORAGE());
									if (STORAGE != null) {
										PRICE = JOptionPane.showInputDialog(sellerPhoneTab.this, selected, selected.getPRICE());
										if (PRICE != null) {
											PERFORMANCE = JOptionPane.showInputDialog(sellerPhoneTab.this, selected, selected.getPERFORMANCE());
											if (PERFORMANCE != null) {
												MANUFACTURE = JOptionPane.showInputDialog(sellerPhoneTab.this, selected, selected.getMANUFACTURE());
												itemlist.set(index, new Phone(MODEL_NAME, CPU_INFO, DISPLAY, RAM, STORAGE,
														PRICE, PERFORMANCE, MANUFACTURE));
												updateList();
												phonelist.insert_Phone(MODEL_NAME, CPU_INFO, DISPLAY, RAM, STORAGE,
														PRICE, PERFORMANCE, MANUFACTURE);
												try {
													phonelist.WriteFile_PhoneList();
												} catch (Exception e) {
													e.printStackTrace();
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
				 
		// 기존 데이터를 삭제하는 버튼
		JButton btnDelData = new JButton("Delete");
		btnDelData.setBounds(607, 300, 181, 45);
		add(btnDelData);
		btnDelData.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				int index = list.getSelectedIndex();

				itemlist.remove(index);
				phonelist.getTotal_phone_list().remove(index);
				updateList();
				try
				{
				phonelist.WriteFile_PhoneList();
				}catch (Exception e) {
					e.printStackTrace();
				}	
			}
		});
	}
	
	// class 형식으로 이벤트를 표현하는 방법
	class RadioButtonSelectedEvent implements ItemListener {
		@Override
		public void itemStateChanged(ItemEvent e) {
			updateList();
		}
	}
	
	private void updateList() {
		
		listModel.clear();
			for (Phone element : itemlist) {
				listModel.addElement(element.getMODEL_NAME());
			}
		}
	

	public JList getList() {
		return list;
	}

	public void setList(JList list) {
		this.list = list;
	}

	public DefaultListModel getListModel() {
		return listModel;
	}

	public void setListModel(DefaultListModel listModel) {
		this.listModel = listModel;
	}
}