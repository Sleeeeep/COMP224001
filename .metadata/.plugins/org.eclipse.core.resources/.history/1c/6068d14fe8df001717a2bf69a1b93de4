package buyer;

import java.util.*;
import callingplan.*;
import phone.Phone;

public class CallingPlanRec {
	private CallingPlan_List totallist;
	private ArrayList<CallingPlan> recommandlist;

	private int Message;
	private int Call;
	private double Data;
	private int Price;

	public CallingPlanRec() {

	}

	public CallingPlanRec(String message, String call, String data, String price) {
		this.setMessage(message);
		this.setCall(call);
		this.setData(data);
		this.setPrice(price);
		totallist = new CallingPlan_List(2);
		recommandlist = new ArrayList<>();
	}

	public void checkInterval(int offset) // data -> call -> message -> price
	{
		int addcheck = 0;
		while (offset < totallist.Get_Total_CallingPlan_List_Size() && addcheck <= 2 && addcheck <= totallist.Get_Total_CallingPlan_List_Size()) {
			for (int i = 0; addcheck <= 2 && i < totallist.Get_Total_CallingPlan_List_Size(); i++) {
				CallingPlan curCallingPlan = new CallingPlan(totallist.getTotal_CallingPlan_list().get(i));
				if (checkData(curCallingPlan, offset))
					if (checkCall(curCallingPlan, offset))
						if (checkMessage(curCallingPlan, offset))
							if (checkPrice(curCallingPlan, offset)) {
								if (recommandlist.contains(curCallingPlan))
									continue;
								recommandlist.add(curCallingPlan);
								addcheck++;
							}
			}
			offset++;
		}
	}

	public Boolean checkMessage(CallingPlan curCallingPlan, int offset) // +- 50 * offset
	{
		if (Message == 0)
			return true;
		int curMessage = Integer.parseInt(curCallingPlan.getMESSAGE());

		if ((curMessage >= (Message - (50 * offset))) && (curMessage <= (Message + (50 * offset))))
			return true;
		else
			return false;
	}

	public Boolean checkCall(CallingPlan curCallingPlan, int offset) // +- 10 * offset
	{
		if (Call == 0)
			return true;
		int curCall = Integer.parseInt(curCallingPlan.getCALL());

		if ((curCall >= (Call - (10 * offset))) && (curCall <= (Call + (10 * offset))))
			return true;
		else
			return false;
	}

	public Boolean checkData(CallingPlan curCallingPlan, int offset) // +- 0.1 * offset
	{
		if (Data == 0)
			return true;
		double curData = Double.parseDouble(curCallingPlan.getDATA());

		if ((curData >= (Data - (0.1 * offset))) && (curData <= (Data + (0.1 * offset))))
			return true;
		else
			return false;
	}

	public Boolean checkPrice(CallingPlan curCallingPlan, int offset) // +- 1000 * offset
	{
		if (Price == 0)
			return true;
		int curPrice = Integer.parseInt(curCallingPlan.getPRICE());

		if ((curPrice >= (Price - (1000 * offset))) && (curPrice <= (Price + (1000 * offset))))
			return true;
		else
			return false;
	}

	public int getMessage() {
		return Message;
	}

	public void setMessage(String message) {
		if ("".equals(message))
			Message = 0;
		Message = Integer.parseInt(message);
	}

	public int getCall() {
		return Call;
	}

	public void setCall(String call) {
		if ("".equals(call))
			Call = 0;
		Call = Integer.parseInt(call);
	}

	public double getData() {
		return Data;
	}

	public void setData(String data) {
		if ("".equals(data))
			Data = 0;
		Data = Double.parseDouble(data);
	}

	public int getPrice() {
		return Price;
	}

	public void setPrice(String price) {
		if ("".equals(price))
			Price = 0;
		Price = Integer.parseInt(price);
	}
	public ArrayList<CallingPlan> getRecommandlist() {
		return recommandlist;
	}

	public void setRecommandlist(ArrayList<CallingPlan> recommandlist) {
		this.recommandlist = recommandlist;
	}
}
