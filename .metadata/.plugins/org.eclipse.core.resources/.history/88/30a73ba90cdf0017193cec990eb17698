package gui.buyer.tab;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import info.Product;
import info.User;

public class buyerCallingPlanTab extends AbstractTabPanel {

	private DefaultListModel listModel;
	private JList list;

	private JButton btnContract;

	final List<Product> testProduct1 = new ArrayList<>();
	
	public buyerCallingPlanTab(User user) {
		super(user);
		
		// 테스트용 제품 생성
		testProduct1.add(new Product("item1", "./figures/picture1.png", 1100000));
		testProduct1.add(new Product("item2", "./figures/picture2.png", 1400000));
		testProduct1.add(new Product("item3", "./figures/picture3.png",  900000));
		
		// GUI part
		JLabel lblTitle = new JLabel("CallingPlan List");
		lblTitle.setFont(new Font("맑은 고딕", Font.BOLD, 30));
		lblTitle.setBounds(40, 33, 240, 40);
		add(lblTitle);
		
		// 제품 이미지를 Label의 Icon으로 설정
		final JLabel lblProductImage = new JLabel();
		lblProductImage.setBounds(607, 275, 180, 280);
		add(lblProductImage);
		

		// Scroll 가능한 List 보여주는 객체 생성 (ScrollPane 안에 JList 넣음
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(40, 150, 530, 425);
		add(scrollPane);

		
		// Listmodel 생성 (List의 element에 대한 정보를 지님)
		listModel = new DefaultListModel();
		for (Product element : testProduct1) {
			listModel.addElement(element.getName());
		}
		
		// Listmodel을 연결한 JList 생성하고 Scroll 가능한 Panel에 추가 
		list = new JList(listModel);
		scrollPane.setViewportView(list);
		
		
		// 리스트에서 클릭 시 제품 정보와 사진 출력
		list.addListSelectionListener(new ListSelectionListener() {

			@Override
			public void valueChanged(ListSelectionEvent e) {
				// 클릭된 경우 정보 표시
				int index = list.getSelectedIndex();
				if (index < 0)
					return;

				if (index >= testProduct1.size())
					return;
				Product selected = testProduct1.get(index);

				lblProductImage.setIcon(new ImageIcon(selected.getFigurePath()));
			}
		});
		
		
		// 리스트에서 더블 클릭 시 정보 보여주도록 함
		list.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent evt) {
				JList list = (JList) evt.getSource();

				if (evt.getClickCount() != 0) {
				}
				// Double-click일 경우
				if (evt.getClickCount() == 2) {
					// 클릭된 Index 가져옴
					int index = list.locationToIndex(evt.getPoint());
					if (index < 0)
						return;

					if (index >= testProduct1.size())
						return;
					Product selected = testProduct1.get(index);
					String msg = String.format("%s : %,d원", selected.getName(), selected.getPrice());
					JOptionPane.showMessageDialog(buyerCallingPlanTab.this, msg, "Infomation",
							JOptionPane.INFORMATION_MESSAGE);
				}
			}
		});
		
		// 옵션 선택에 따라 리스트 정보 변경
		ButtonGroup optionGroup = new ButtonGroup();
		
		// 계약 버튼 추가
		 
		// 새로 데이터를 추가하는 버튼
		JButton btnNewData = new JButton("Add new Data");
		btnNewData.setBounds(607, 500, 181, 45);
		add(btnNewData);
		btnNewData.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
			
				updateList();
			}
		});
		
		// 기존 데이터를 삭제하는 버튼
		JButton btnDelData = new JButton("Del existing Data");
		btnDelData.setBounds(607, 550, 181, 45);
		add(btnDelData);
		btnDelData.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				int index = list.getSelectedIndex();

				testProduct1.remove(index);

				updateList();
			}
		});
	}
	
	// class 형식으로 이벤트를 표현하는 방법
	class RadioButtonSelectedEvent implements ItemListener {
		@Override
		public void itemStateChanged(ItemEvent e) {
			updateList();
		}
	}
	
	private void updateList() {
		
		listModel.clear();
			for (Product element : testProduct1) {
				listModel.addElement(element.getName());
			}
		}
	

	public JList getList() {
		return list;
	}

	public void setList(JList list) {
		this.list = list;
	}

	public DefaultListModel getListModel() {
		return listModel;
	}

	public void setListModel(DefaultListModel listModel) {
		this.listModel = listModel;
	}

	public JButton getBtnContract() {
		return btnContract;
	}


	public void setBtnContract(JButton btnContract) {
		this.btnContract = btnContract;
	}
}